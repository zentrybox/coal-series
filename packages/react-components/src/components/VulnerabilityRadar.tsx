import type { HTMLAttributes } from "react";
import { cn } from "../lib/cn";

export type RadarSeverity = "critical" | "warning" | "info" | "safe";

export interface VulnerabilityPoint {
  id: string;
  severity: RadarSeverity;
  radiusPercent: number;
  angleDegrees: number;
}

export interface VulnerabilityRadarProps extends HTMLAttributes<HTMLDivElement> {
  points: VulnerabilityPoint[];
  sweepLabel?: string;
  sweepProgress?: number;
}

const severityColor: Record<RadarSeverity, string> = {
  critical: "bg-status-critical",
  warning: "bg-status-warning",
  info: "bg-status-info",
  safe: "bg-status-safe",
};

export function VulnerabilityRadar({
  points,
  sweepLabel,
  sweepProgress,
  className,
  ...props
}: VulnerabilityRadarProps) {
  return (
    <div className={cn("coal-card p-6", className)} {...props}>
      <div className="flex items-center justify-between text-body-sm text-coal-text-muted">
        <div>
          <h3 className="text-h3 font-semibold text-coal-text-primary">Threat radar</h3>
          <p>Live sweep over critical assets.</p>
        </div>
        {sweepLabel && (
          <span className="font-semibold text-status-info">
            {sweepLabel}
            {typeof sweepProgress === "number" ? ` Â· ${Math.round(sweepProgress * 100)}%` : ""}
          </span>
        )}
      </div>
      <div className="mt-6 flex flex-col items-center gap-6">
        <div className="coal-radar-sweep coal-gridlines relative aspect-square w-full max-w-[260px] rounded-full border border-coal-border bg-coal-bg-alt">
          {points.map((point) => {
            const angle = (point.angleDegrees / 180) * Math.PI;
            const distance = Math.min(Math.max(point.radiusPercent, 0), 100) / 100;
            const x = 50 + Math.cos(angle) * distance * 50;
            const y = 50 + Math.sin(angle) * distance * 50;

            return (
              <span
                key={point.id}
                className={cn(
                  "absolute h-3 w-3 -translate-x-1/2 -translate-y-1/2 rounded-full shadow-[0_0_16px_rgba(56,160,255,0.35)]",
                  severityColor[point.severity],
                )}
                style={{ left: `${x}%`, top: `${y}%` }}
              />
            );
          })}
        </div>
        <dl className="grid w-full grid-cols-2 gap-3 text-body-sm text-coal-text-muted">
          <div className="rounded-base border border-coal-border px-3 py-2">
            <dt className="font-semibold text-coal-text-secondary">Critical</dt>
            <dd>{points.filter((p) => p.severity === "critical").length} surfaced this hour</dd>
          </div>
          <div className="rounded-base border border-coal-border px-3 py-2">
            <dt className="font-semibold text-coal-text-secondary">Watchlist</dt>
            <dd>{points.filter((p) => p.severity !== "safe").length} nodes monitored</dd>
          </div>
        </dl>
      </div>
    </div>
  );
}
